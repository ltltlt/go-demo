// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package test

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ErrorCode int64
const (
  ErrorCode_SUCCESS ErrorCode = 0
  ErrorCode_UNEXCEPTED_ERROR ErrorCode = 1
  ErrorCode_BUFFER_FULL ErrorCode = 2
  ErrorCode_DESERIALIZE_FAILED ErrorCode = 3
  ErrorCode_FILE_NOT_EXIST ErrorCode = 4
  ErrorCode_IO_ERROR ErrorCode = 5
  ErrorCode_TALOS_OPERATION_FAILED ErrorCode = 6
  ErrorCode_INVALID_TOPIC ErrorCode = 7
  ErrorCode_AGENT_NOT_READY ErrorCode = 8
  ErrorCode_MODULED_STOPED ErrorCode = 9
  ErrorCode_TOO_MANY_FILES ErrorCode = 10
  ErrorCode_SERIALIZE_FAILED ErrorCode = 11
  ErrorCode_THRIFT_TRANSPORT_FAILED ErrorCode = 12
  ErrorCode_OPERATION_FAILED ErrorCode = 100
  ErrorCode_HBASE_OPERATION_FAILED ErrorCode = 101
  ErrorCode_TEAM_EXIST ErrorCode = 102
  ErrorCode_TEAM_NOT_EXIST ErrorCode = 103
  ErrorCode_VERSION_CONFLICTING_ERROR ErrorCode = 104
  ErrorCode_MODULE_EXIST ErrorCode = 105
  ErrorCode_MODULE_NOT_EXIST ErrorCode = 106
  ErrorCode_INVALID_REQUEST_PARAMS ErrorCode = 107
  ErrorCode_UNKNOW_TALOS_CLUSTER ErrorCode = 108
  ErrorCode_LINK_UNIT_KEY_NOT_EXIST ErrorCode = 109
  ErrorCode_PERMISSION_DENIED ErrorCode = 110
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_SUCCESS: return "SUCCESS"
  case ErrorCode_UNEXCEPTED_ERROR: return "UNEXCEPTED_ERROR"
  case ErrorCode_BUFFER_FULL: return "BUFFER_FULL"
  case ErrorCode_DESERIALIZE_FAILED: return "DESERIALIZE_FAILED"
  case ErrorCode_FILE_NOT_EXIST: return "FILE_NOT_EXIST"
  case ErrorCode_IO_ERROR: return "IO_ERROR"
  case ErrorCode_TALOS_OPERATION_FAILED: return "TALOS_OPERATION_FAILED"
  case ErrorCode_INVALID_TOPIC: return "INVALID_TOPIC"
  case ErrorCode_AGENT_NOT_READY: return "AGENT_NOT_READY"
  case ErrorCode_MODULED_STOPED: return "MODULED_STOPED"
  case ErrorCode_TOO_MANY_FILES: return "TOO_MANY_FILES"
  case ErrorCode_SERIALIZE_FAILED: return "SERIALIZE_FAILED"
  case ErrorCode_THRIFT_TRANSPORT_FAILED: return "THRIFT_TRANSPORT_FAILED"
  case ErrorCode_OPERATION_FAILED: return "OPERATION_FAILED"
  case ErrorCode_HBASE_OPERATION_FAILED: return "HBASE_OPERATION_FAILED"
  case ErrorCode_TEAM_EXIST: return "TEAM_EXIST"
  case ErrorCode_TEAM_NOT_EXIST: return "TEAM_NOT_EXIST"
  case ErrorCode_VERSION_CONFLICTING_ERROR: return "VERSION_CONFLICTING_ERROR"
  case ErrorCode_MODULE_EXIST: return "MODULE_EXIST"
  case ErrorCode_MODULE_NOT_EXIST: return "MODULE_NOT_EXIST"
  case ErrorCode_INVALID_REQUEST_PARAMS: return "INVALID_REQUEST_PARAMS"
  case ErrorCode_UNKNOW_TALOS_CLUSTER: return "UNKNOW_TALOS_CLUSTER"
  case ErrorCode_LINK_UNIT_KEY_NOT_EXIST: return "LINK_UNIT_KEY_NOT_EXIST"
  case ErrorCode_PERMISSION_DENIED: return "PERMISSION_DENIED"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "SUCCESS": return ErrorCode_SUCCESS, nil 
  case "UNEXCEPTED_ERROR": return ErrorCode_UNEXCEPTED_ERROR, nil 
  case "BUFFER_FULL": return ErrorCode_BUFFER_FULL, nil 
  case "DESERIALIZE_FAILED": return ErrorCode_DESERIALIZE_FAILED, nil 
  case "FILE_NOT_EXIST": return ErrorCode_FILE_NOT_EXIST, nil 
  case "IO_ERROR": return ErrorCode_IO_ERROR, nil 
  case "TALOS_OPERATION_FAILED": return ErrorCode_TALOS_OPERATION_FAILED, nil 
  case "INVALID_TOPIC": return ErrorCode_INVALID_TOPIC, nil 
  case "AGENT_NOT_READY": return ErrorCode_AGENT_NOT_READY, nil 
  case "MODULED_STOPED": return ErrorCode_MODULED_STOPED, nil 
  case "TOO_MANY_FILES": return ErrorCode_TOO_MANY_FILES, nil 
  case "SERIALIZE_FAILED": return ErrorCode_SERIALIZE_FAILED, nil 
  case "THRIFT_TRANSPORT_FAILED": return ErrorCode_THRIFT_TRANSPORT_FAILED, nil 
  case "OPERATION_FAILED": return ErrorCode_OPERATION_FAILED, nil 
  case "HBASE_OPERATION_FAILED": return ErrorCode_HBASE_OPERATION_FAILED, nil 
  case "TEAM_EXIST": return ErrorCode_TEAM_EXIST, nil 
  case "TEAM_NOT_EXIST": return ErrorCode_TEAM_NOT_EXIST, nil 
  case "VERSION_CONFLICTING_ERROR": return ErrorCode_VERSION_CONFLICTING_ERROR, nil 
  case "MODULE_EXIST": return ErrorCode_MODULE_EXIST, nil 
  case "MODULE_NOT_EXIST": return ErrorCode_MODULE_NOT_EXIST, nil 
  case "INVALID_REQUEST_PARAMS": return ErrorCode_INVALID_REQUEST_PARAMS, nil 
  case "UNKNOW_TALOS_CLUSTER": return ErrorCode_UNKNOW_TALOS_CLUSTER, nil 
  case "LINK_UNIT_KEY_NOT_EXIST": return ErrorCode_LINK_UNIT_KEY_NOT_EXIST, nil 
  case "PERMISSION_DENIED": return ErrorCode_PERMISSION_DENIED, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ErrorCode
//  - ErrMsg
//  - Details
type GalaxyLCSException struct {
  ErrorCode ErrorCode `thrift:"errorCode,1,required" db:"errorCode" json:"errorCode"`
  ErrMsg *string `thrift:"errMsg,2" db:"errMsg" json:"errMsg,omitempty"`
  Details *string `thrift:"details,3" db:"details" json:"details,omitempty"`
}

func NewGalaxyLCSException() *GalaxyLCSException {
  return &GalaxyLCSException{}
}


func (p *GalaxyLCSException) GetErrorCode() ErrorCode {
  return p.ErrorCode
}
var GalaxyLCSException_ErrMsg_DEFAULT string
func (p *GalaxyLCSException) GetErrMsg() string {
  if !p.IsSetErrMsg() {
    return GalaxyLCSException_ErrMsg_DEFAULT
  }
return *p.ErrMsg
}
var GalaxyLCSException_Details_DEFAULT string
func (p *GalaxyLCSException) GetDetails() string {
  if !p.IsSetDetails() {
    return GalaxyLCSException_Details_DEFAULT
  }
return *p.Details
}
func (p *GalaxyLCSException) IsSetErrMsg() bool {
  return p.ErrMsg != nil
}

func (p *GalaxyLCSException) IsSetDetails() bool {
  return p.Details != nil
}

func (p *GalaxyLCSException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorCode = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *GalaxyLCSException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *GalaxyLCSException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrMsg = &v
}
  return nil
}

func (p *GalaxyLCSException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Details = &v
}
  return nil
}

func (p *GalaxyLCSException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GalaxyLCSException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GalaxyLCSException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *GalaxyLCSException) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetErrMsg() {
    if err := oprot.WriteFieldBegin("errMsg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errMsg: ", p), err) }
    if err := oprot.WriteString(string(*p.ErrMsg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errMsg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errMsg: ", p), err) }
  }
  return err
}

func (p *GalaxyLCSException) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDetails() {
    if err := oprot.WriteFieldBegin("details", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:details: ", p), err) }
    if err := oprot.WriteString(string(*p.Details)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.details (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:details: ", p), err) }
  }
  return err
}

func (p *GalaxyLCSException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GalaxyLCSException(%+v)", *p)
}

func (p *GalaxyLCSException) Error() string {
  return p.String()
}

// Attributes:
//  - ClusterName
//  - OrgId
//  - TopicName
//  - TeamId
//  - Data
//  - ExtendAgentData
type Record struct {
  ClusterName string `thrift:"clusterName,1,required" db:"clusterName" json:"clusterName"`
  OrgId string `thrift:"orgId,2,required" db:"orgId" json:"orgId"`
  TopicName string `thrift:"topicName,3,required" db:"topicName" json:"topicName"`
  TeamId string `thrift:"teamId,4,required" db:"teamId" json:"teamId"`
  Data [][]byte `thrift:"data,5,required" db:"data" json:"data"`
  ExtendAgentData *bool `thrift:"extendAgentData,6" db:"extendAgentData" json:"extendAgentData,omitempty"`
}

func NewRecord() *Record {
  return &Record{}
}


func (p *Record) GetClusterName() string {
  return p.ClusterName
}

func (p *Record) GetOrgId() string {
  return p.OrgId
}

func (p *Record) GetTopicName() string {
  return p.TopicName
}

func (p *Record) GetTeamId() string {
  return p.TeamId
}

func (p *Record) GetData() [][]byte {
  return p.Data
}
var Record_ExtendAgentData_DEFAULT bool
func (p *Record) GetExtendAgentData() bool {
  if !p.IsSetExtendAgentData() {
    return Record_ExtendAgentData_DEFAULT
  }
return *p.ExtendAgentData
}
func (p *Record) IsSetExtendAgentData() bool {
  return p.ExtendAgentData != nil
}

func (p *Record) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetClusterName bool = false;
  var issetOrgId bool = false;
  var issetTopicName bool = false;
  var issetTeamId bool = false;
  var issetData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetClusterName = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetOrgId = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTopicName = true
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTeamId = true
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetData = true
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetClusterName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClusterName is not set"));
  }
  if !issetOrgId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OrgId is not set"));
  }
  if !issetTopicName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TopicName is not set"));
  }
  if !issetTeamId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TeamId is not set"));
  }
  if !issetData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Data is not set"));
  }
  return nil
}

func (p *Record)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClusterName = v
}
  return nil
}

func (p *Record)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OrgId = v
}
  return nil
}

func (p *Record)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TopicName = v
}
  return nil
}

func (p *Record)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TeamId = v
}
  return nil
}

func (p *Record)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Data = append(p.Data, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Record)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ExtendAgentData = &v
}
  return nil
}

func (p *Record) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Record"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Record) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clusterName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterName: ", p), err) }
  if err := oprot.WriteString(string(p.ClusterName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clusterName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterName: ", p), err) }
  return err
}

func (p *Record) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orgId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orgId: ", p), err) }
  if err := oprot.WriteString(string(p.OrgId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orgId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orgId: ", p), err) }
  return err
}

func (p *Record) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("topicName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:topicName: ", p), err) }
  if err := oprot.WriteString(string(p.TopicName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.topicName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:topicName: ", p), err) }
  return err
}

func (p *Record) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("teamId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:teamId: ", p), err) }
  if err := oprot.WriteString(string(p.TeamId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.teamId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:teamId: ", p), err) }
  return err
}

func (p *Record) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data: ", p), err) }
  return err
}

func (p *Record) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtendAgentData() {
    if err := oprot.WriteFieldBegin("extendAgentData", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extendAgentData: ", p), err) }
    if err := oprot.WriteBool(bool(*p.ExtendAgentData)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extendAgentData (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extendAgentData: ", p), err) }
  }
  return err
}

func (p *Record) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Record(%+v)", *p)
}

type LCSAgentService interface {
  // Parameters:
  //  - Record
  Record(ctx context.Context, record *Record) (err error)
}

type LCSAgentServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewLCSAgentService instead
func NewLCSAgentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LCSAgentServiceClient {
  return &LCSAgentServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewLCSAgentService instead
func NewLCSAgentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LCSAgentServiceClient {
  return &LCSAgentServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewLCSAgentServiceClient(c thrift.TClient) *LCSAgentServiceClient {
  return &LCSAgentServiceClient{
    c: c,
  }
}

// Parameters:
//  - Record
func (p *LCSAgentServiceClient) Record(ctx context.Context, record *Record) (err error) {
  var _args1 LCSAgentServiceRecordArgs
  _args1.Record = record
  var _result2 LCSAgentServiceRecordResult
  if err = p.c.Call(ctx, "Record", &_args1, &_result2); err != nil {
    return
  }
  switch {
  case _result2.E!= nil:
    return _result2.E
  }

  return nil
}

type LCSAgentServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler LCSAgentService
}

func (p *LCSAgentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *LCSAgentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *LCSAgentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewLCSAgentServiceProcessor(handler LCSAgentService) *LCSAgentServiceProcessor {

  self3 := &LCSAgentServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self3.processorMap["Record"] = &lCSAgentServiceProcessorRecord{handler:handler}
return self3
}

func (p *LCSAgentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x4.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x4

}

type lCSAgentServiceProcessorRecord struct {
  handler LCSAgentService
}

func (p *lCSAgentServiceProcessorRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := LCSAgentServiceRecordArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Record", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := LCSAgentServiceRecordResult{}
  var err2 error
  if err2 = p.handler.Record(ctx, args.Record); err2 != nil {
  switch v := err2.(type) {
    case *GalaxyLCSException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Record: " + err2.Error())
    oprot.WriteMessageBegin("Record", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("Record", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Record
type LCSAgentServiceRecordArgs struct {
  Record *Record `thrift:"record,1" db:"record" json:"record"`
}

func NewLCSAgentServiceRecordArgs() *LCSAgentServiceRecordArgs {
  return &LCSAgentServiceRecordArgs{}
}

var LCSAgentServiceRecordArgs_Record_DEFAULT *Record
func (p *LCSAgentServiceRecordArgs) GetRecord() *Record {
  if !p.IsSetRecord() {
    return LCSAgentServiceRecordArgs_Record_DEFAULT
  }
return p.Record
}
func (p *LCSAgentServiceRecordArgs) IsSetRecord() bool {
  return p.Record != nil
}

func (p *LCSAgentServiceRecordArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LCSAgentServiceRecordArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Record = &Record{}
  if err := p.Record.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Record), err)
  }
  return nil
}

func (p *LCSAgentServiceRecordArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Record_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LCSAgentServiceRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("record", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:record: ", p), err) }
  if err := p.Record.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Record), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:record: ", p), err) }
  return err
}

func (p *LCSAgentServiceRecordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LCSAgentServiceRecordArgs(%+v)", *p)
}

// Attributes:
//  - E
type LCSAgentServiceRecordResult struct {
  E *GalaxyLCSException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewLCSAgentServiceRecordResult() *LCSAgentServiceRecordResult {
  return &LCSAgentServiceRecordResult{}
}

var LCSAgentServiceRecordResult_E_DEFAULT *GalaxyLCSException
func (p *LCSAgentServiceRecordResult) GetE() *GalaxyLCSException {
  if !p.IsSetE() {
    return LCSAgentServiceRecordResult_E_DEFAULT
  }
return p.E
}
func (p *LCSAgentServiceRecordResult) IsSetE() bool {
  return p.E != nil
}

func (p *LCSAgentServiceRecordResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LCSAgentServiceRecordResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &GalaxyLCSException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *LCSAgentServiceRecordResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Record_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LCSAgentServiceRecordResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *LCSAgentServiceRecordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LCSAgentServiceRecordResult(%+v)", *p)
}


